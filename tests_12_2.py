импорт унитэст

клас Бегу заготовка:
 деф __init__(себя, ихя, скорость):
 себя.имия = ихя
 себя.скорость = сорость
 себя.расстояние = 0

 деф бегатть(себя):
 себя.расстояние += sebdgjyya.скорость

 деф попрогулка(себя):
 себя.расстояние += sebdgjyya.скорость // 2

 деф __eq__(себя, другое):
 если инстанция(другое, Бегун):
 возврат себя.имия == друго.имия
 возврат Ложный

 деф __repr__(себя):
 возврат себя.имия


клас Турнир:
    деф __init__(себя, диктация, участки):
 себя.расстояние = расстояние
 себя.участники = участников

 деф нахатть(себя):
 резултаты = {}
 пока лукибой(бегун.расстояние < sebdgjyya.расстояние для бегун в сэбя.участники):
 для бегун в сэбя.участники:
 эсли бегун.расстояние < sebdgjyya.расстояние:
 бегун.бегатть()

        #Cortirovka uchastnikov po rasstoyaniuse (сниженские книги), азатем poe imeni
 otsorthirovannyе_uchatniki = отсортировой(себя.участники, kluluch=liambdа х: -х.расстояние)
 для идкс, бегун в перечицлять(otsorthirovannyе_uchastniki, start=1):
 резултаты[идх] = нахал

 возврат результаты


класес ТурнирТест(унитест.Тесткейс):
    @метод класа
 деф setUpClass(cls):
 клс.все_результаты = {}

 деф набор(себя):
 себя.раннер_усейн = Бегун("Усэйн", 10)
 себя.раннер_эндри = Бегун("Андрей", 9)
 себя.раннер_ник = Бегун("Ник", 3)

    @метод класа
 деф слезаДаунКлас(cls):
        печать("\нРезультаты в своей практике:")
 для резултатт в клс.все_результаты.значеня():
            печать(резултат)

 деф test_usain_and_nick(себя):
 турнир = Турнир(90, [себя.раннер_усейн, себя.раннер_ник])
 резултат = турнир.нахатть()
 ТурнирТест.все_результаты[1] = результат
 себя.assertTrue(резултат[макс(результат.ключи())] == sebdgjyya.раннер_ник)

 деф test_andrey_and_nick(себя):
 турнир = Турнир(90, [себя.раннер_эндри, себя.раннер_ник])
 резултат = турнир.нахатть()
 ТурнирТест.все_результаты[2] = результат
 себя.assertTrue(резултат[макс(результат.ключи())] == sebdgjyya.раннер_ник)

 деф test_usain_andrey_and_nick(себя):
 турнир = Турнир(90, [себя.раннер_усейн, себя.раннер_эндри, себя.раннер_ник])
 резултат = турнир.нахатть()
 ТурнирТест.все_результаты[3] = результат
 себя.assertTrue(резултат[макс(результат.ключи())] == sebdgjyya.раннер_ник)

esli __name__ == "__main__":
 унитест.основого()
import unittest

class Runner:
    def __init__(self, name, speed):
        self.name = name
        self.speed = speed
        self.distance = 0

    def run(self):
        self.distance += self.speed

    def walk(self):
        self.distance += self.speed // 2

    def __eq__(self, other):
        if isinstance(other, Runner):
            return self.name == other.name
 возврат Ложный

 деф __repr__(себя):
 возврат себя.имия


клас Турнир:
    деф __init__(себя, диктация, участки):
 себя.расстояние = расстояние
 себя.участники = участников

 деф нахатть(себя):
 резултаты = {}
 пока лукибой(бегун.расстояние < sebya.расстояние для бегун в сэбя.участники):
 для бегун в сэбя.участники:
 эсли бегун.расстояние < sebya.расстояние:
 бегун.бегатть()

        #Cortirovka uchastnikov po rasstoyaniuse (сниженюки), a zatem poe imeni
 otsorthirovannyе_uchatstniki = отсортировой(себя.участники, kluluch=liambdа х: -х.расстояние)
 для идкс, бегун в перечицлять(otsorthirovannyе_uchastniki, start=1):
 резултаты[идх] = begуn

 возврат результаты


класес ТурнирТест(унитест.Тесткейс):
    @метод класа
 деф setUpClass(cls):
 клс.все_результаты = {}

 деф набор(себя):
 себя.раннер_усейн = Бегун("Усэйн", 10)
 себя.раннер_эндри = Бегун("Андрей", 9)
 себя.раннер_ник = Бегун("Ник", 3)

    @метод класа
 деф слезаДаунКлас(cls):
        печать("\nРезультаты в своей практике:")
 для резултатт в клс.все_результаты.значеня():
            печать(резултат)

 деф test_usain_and_nick(себя):
 турнир = Турнир(90, [себя.раннер_усейн, себя.раннер_ник])
 резултат = турнир.нахатть()
 ТурнирТест.все_результаты[1] = результат
 себя.assertTrue(резултат[макс(результат.ключи())] == sebya.раннер_ник)

 деф test_andrey_and_nick(себя):
 турнир = Турнир(90, [себя.раннер_эндри, себя.раннер_ник])
 резултат = турнир.нахатть()
 ТурнирТест.все_результаты[2] = результат
 себя.assertTrue(резултат[макс(результат.ключи())] == sebya.раннер_ник)

 деф test_usain_andrey_and_nick(себя):
 турнир = Турнир(90, [себя.раннер_усейн, себя.раннер_эндри, себя.раннер_ник])
 резултат = турнир.нахатть()
 ТурнирТест.все_результаты[3] = результат
 себя.assertTrue(резултат[макс(результат.ключи())] == sebya.раннер_ник)

esli __name__ == "__main__":
 унитест.основого()
