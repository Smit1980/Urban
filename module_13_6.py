import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from aiogram.contrib.fsm_storage.memory import ПамятьХранение

#Установите токен вашего бота
API_TOKEN = "ТВОЙ_TELEGRAM_BOT_TOKEN"

#Логирование
журналирование.базовыйКонфигурация(level=logging.ИНФОРМАЦИЯ)

#Создание экземплиеры и диспептеры
бот = Бот(токен=API_TOKEN)
дп = Диспетчер(бот, хранилище=ПамятьХранение())

#Создаем Групу из других
класс Пользовательское государство(ШтатыГруппа):
 возраст = Государство()
 рост = Государство()
 вес = Государство()

#Создаем обычну из клавиатуры
main_keyboard = ОтветитьKeyboardMarkup(resize_keyboard=Истинный)
main_keyboard.добавить(КлавиатураКнопка("Расчитать"), КлавиатураКнопка("Инфоармация"))

#Создаем Инлайн-клавиатуру
inline_keyboard = InlineKeyboardMarkup()
inline_keyboard.добавить(
    Встроенная кнопка клавиатуры("Расчитать норму калорий", callback_data="калории"),
    Встроенная кнопка клавиатуры("Формулы Ращёта", callback_data="формулы")
)

#Обработка команды /старт
@dp.message_handler(команды=['начать'])
асинхронизация деф начать(сообщение: типы.Сообщение):
    ждать сообщение.ответ("Привет!" Выберите деиствие:, replement_markup=main_keyboard)

#Обработка кнопки "Расчитать"
@dp.message_handler(Текст(равно="Расчитать"))
асинхронизация деф главное_меню(сообщение: типы.Сообщение):
    ждать сообщение.ответ("Выберите опциукс:", replement_markup=inline_keyboard)

#Обработка нажатия на "Формулы расчёта"
@dp.callback_query_handler(Текст(равно="формулы"))
асинхронизация деф get_formulas(вызов: типы.Обратный запрос):
 формула = (
        "Формула Миффлина - Сань Жора:\н"
        "Для жжчин: 10 * вэс (кг) + 6.25 * рост (см) - 5 * возраст (лет) + 5\н"
        "Для жениньин: 10 * вэс (кг) + 6.25 * рост (см) - 5 * возраст (лет) - 161"
    )
    ждать звонить.сообщение.ответ(формула)
    ждать звонить.ответ()

#Обработка нажатия на "Расчитать норму калорий"
@dp.callback_query_handler(Текст(равно="калории"))
асинхронизация деф набор_age(вызов: типы.Обратный запрос):
    ждать звонить.сообщение.ответ("Введите вой возраст:")
    ждать ПользовательГосударство.возраст.набор()
    ждать звонить.ответ()

#Получное возраста
@dp.message_handler(state=UserState.возраст)
асинхронизация деф set_growth(сообщение: типы.Сообщение, состояние: FSMContext):
    ждать государство.обновление_данных(возраст=message.текст)
    ждать сообщение.ответ("Введите вой рост (в см):")
    ждать ПользовательГосударство.рост.набор()

#Получное роста
@dp.message_handler(state=UserState.рост)
асинхронизация деф набор_вес(сообщение: типы.Сообщение, состояние: FSMContext):
    ждать государство.обновление_данных(рост=message.текст)
    ждать сообщение.ответ("Введите войс (в кг):")
    ждать ПользовательГосударство.вес.набор()

#Полюченье веза и расчет калорий
@dp.message_handler(state=UserState.вес)
асинхронизация деф отправить_калории(сообщение: типы.Сообщение, состояние: FSMContext):
    ждать государство.обновление_данных(вес=message.текст)
 данные = ждать государство.получить_данные()

    #Простой Расет Калорий
 возраст = инт(данные['возраст'])
 рост = инт(данные["рост"])
 вес = инт(данные['вес'])
 калории = 10 * вес + 6.25 * рост - 5 * возраст + 5  #Формула для Мужчин

    ждать сообщение.ответ(ф "Ваша норма калорий": {калории} ккал в дёнь.)
    ждать государство.заканчивать()

#Запуск Бота
если __name__ == '__главный__':
    печать("Бот бежит...")
 исполнитель.старт_опрос(dp, skip_updates=Истинный)
