class Vehicle:
    __COLOR_VARIANTS = ['blue', 'red', 'green', 'black', 'white']  # Доступные цвета для изменения

    def __init__(self, owner, model, color, engine_power):
        self.owner = owner  # Владелец транспорта
        self.__model = model  # Модель (марка) транспорта
        self.__color = color  # Цвет транспорта
        self.__engine_power = engine_power  # Мощность двигателя

    def get_model(self):
        """Возвращает модель транспорта"""
        return f"Модель: {self.__model}"

    def get_horsepower(self):
        """Возвращает мощность двигателя"""
        return f"Мощность двигателя: {self.__engine_power}"

    def get_color(self):
        """Возвращает текущий цвет транспорта"""
        return f"Цвет: {self.__color}"

    def print_info(self):
        """Выводит всю информацию о транспорте"""
        print(self.get_model())
        print(self.get_horsepower())
        print(self.get_color())
        print(f"Владелец: {self.owner}")

    def set_color(self, new_color):
        """Изменяет цвет транспорта, если он доступен в вариантах"""
        if new_color.lower() in (color.lower() for color in self.__COLOR_VARIANTS):
            self.__color = new_color
        else:
            print(f"Нельзя сменить цвет на {new_color}")

class Sedan(Vehicle):
    __PASSENGERS_LIMIT = 5  # Лимит пассажиров для седана

    def __init__(self, owner, model, color, engine_power):
        super().__init__(owner, model, color, engine_power)

# Пример использования
# Доступные цвета: 'blue', 'red', 'green', 'black', 'white'
vehicle1 = Sedan('Fedos', 'Toyota Mark II', 'blue', 500)

# Изначальные свойства
vehicle1.print_info()

# Меняем свойства
vehicle1.set_color('Pink')  # Неподдерживаемый цвет
vehicle1.set_color('BLACK')  # Поддерживаемый цвет
vehicle1.owner = 'Vasyok'  # Меняем владельца

# Проверяем изменения
vehicle1.print_info()
